#!/usr/bin/env python3
"""
Create a new agent with complete setup.

Usage:
    python create_agent.py <agent_name> [--location country/state/city]
    
Example:
    python create_agent.py agent-003
    python create_agent.py agent-003 --location "US/Texas/Houston"
"""

import os
import sys
import json
import shutil
import argparse
from pathlib import Path
from typing import Dict, Any
import structlog

# Add parent directory to path for imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Configure logging
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger(__name__)


class AgentCreator:
    """Agent creation and setup utility."""
    
    def __init__(self, agent_name: str, location: str = "US/California/Santa Clara"):
        """
        Initialize agent creator.
        
        Args:
            agent_name: Name of the agent (e.g., 'agent-003')
            location: Location in format "country/state/city"
        """
        self.agent_name = agent_name
        self.location_parts = location.split('/')
        if len(self.location_parts) != 3:
            raise ValueError("Location must be in format 'country/state/city'")
        
        self.country, self.state, self.city = self.location_parts
        self.agent_dir = f"agents/{agent_name}"
        self.config_path = f"{self.agent_dir}/config.json"
        
    def create_agent_directory(self):
        """Create agent directory structure."""
        logger.info("Creating agent directory", agent_name=self.agent_name)
        
        # Create agent directory
        os.makedirs(self.agent_dir, exist_ok=True)
        logger.info("Agent directory created", path=self.agent_dir)
        
    def create_agent_config(self):
        """Create agent configuration file."""
        logger.info("Creating agent configuration", agent_name=self.agent_name)
        
        # Get the raw public key content
        raw_public_key = self._read_public_key_content()
        
        config = {
            "agent_name": self.agent_name,
            "tpm_public_key": raw_public_key,  # Store raw public key content directly
            "tpm_context_file": f"tpm/{self.agent_name}.ctx",
            "description": f"Edge AI agent for {self.city}, {self.state} deployment",
            "created_at": "2025-08-15T18:00:00Z",
            "status": "active"
        }
        
        with open(self.config_path, 'w') as f:
            json.dump(config, f, indent=2)
        
        logger.info("Agent configuration created", config_path=self.config_path)
        
    def create_tpm_files(self):
        """Create agent-specific TPM context and public key files."""
        logger.info("Creating TPM files", agent_name=self.agent_name)
        
        # Agent-specific files (will be generated by TPM persistence script)
        agent_context = f"tpm/{self.agent_name}.ctx"
        agent_public_key = f"tpm/{self.agent_name}_pubkey.pem"
        
        # Don't copy base files - each agent will generate unique keys
        logger.info("Agent-specific TPM files will be generated during persistence setup", 
                   agent_context=agent_context,
                   agent_public_key=agent_public_key)
        
    def setup_tpm_persistence(self):
        """Run TPM persistence setup for the agent."""
        logger.info("Setting up TPM persistence", agent_name=self.agent_name)
        
        try:
            import subprocess
            from shutil import copyfile
            
            # Calculate agent-specific APP_HANDLE
            # Handle different agent naming patterns
            if self.agent_name.startswith('agent-') and self.agent_name.split('-')[-1].isdigit():
                # Standard pattern: agent-XXX where XXX is a number
                agent_number = int(self.agent_name.split('-')[-1])
                base_handle = int("0x8101000B", 16)
                agent_handle = base_handle + agent_number - 1
            else:
                # Non-standard pattern: use a hash of the agent name for consistent handle
                import hashlib
                agent_hash = hashlib.md5(self.agent_name.encode()).hexdigest()
                agent_number = int(agent_hash[:8], 16) % 1000  # Use first 8 chars of hash, modulo 1000
                base_handle = int("0x8101000B", 16)
                agent_handle = base_handle + agent_number
                
            agent_app_handle = f"0x{agent_handle:08X}"
            
            logger.info("Using agent-specific APP_HANDLE", 
                       agent_name=self.agent_name,
                       app_handle=agent_app_handle)
            
            # Set environment variable for the script
            env = os.environ.copy()
            env['APP_HANDLE'] = agent_app_handle
            
            # Run tpm-app-persist.sh with agent-specific parameters
            cmd = [
                "bash", "tpm/tpm-app-persist.sh", 
                "--force", 
                f"{self.agent_name}.ctx", 
                f"{self.agent_name}_pubkey.pem"
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=".", env=env)
            
            if result.returncode == 0:
                logger.info("TPM persistence setup completed", agent_name=self.agent_name)
                # Ensure agent-specific public key file exists; fall back to default app key path
                agent_pubkey_path = f"tpm/{self.agent_name}_pubkey.pem"
                default_pubkey_path = "tpm/appsk_pubkey.pem"
                if not os.path.exists(agent_pubkey_path) and os.path.exists(default_pubkey_path):
                    try:
                        copyfile(default_pubkey_path, agent_pubkey_path)
                        logger.info("Copied default public key to agent-specific path",
                                    source=default_pubkey_path, dest=agent_pubkey_path)
                    except Exception as copy_err:
                        logger.warning("Failed to copy default public key to agent path",
                                       error=str(copy_err), dest=agent_pubkey_path)
            else:
                logger.warning("TPM persistence setup failed", 
                             agent_name=self.agent_name,
                             error=result.stderr)
                
        except Exception as e:
            logger.warning("TPM persistence setup failed", 
                         agent_name=self.agent_name,
                         error=str(e))
        
    def add_to_collector_allowlist(self):
        """Add agent to collector allowlist."""
        logger.info("Adding agent to collector allowlist", agent_name=self.agent_name)
        
        allowlist_path = "collector/allowed_agents.json"
        
        # Load existing allowlist
        if os.path.exists(allowlist_path):
            with open(allowlist_path, 'r') as f:
                allowed_agents = json.load(f)
        else:
            allowed_agents = []
        
        # Get the raw public key content (already extracted in create_agent_config)
        raw_public_key = self._read_public_key_content()
        
        # Generate public key hash for gateway allowlist
        import hashlib
        public_key_hash = hashlib.sha256(raw_public_key.encode()).hexdigest()
        
        # Check if agent already exists and update it
        for i, agent in enumerate(allowed_agents):
            if agent.get('agent_name') == self.agent_name:
                logger.info("Agent already exists in allowlist, updating", agent_name=self.agent_name)
                # Update the existing agent entry
                allowed_agents[i] = {
                    "agent_name": self.agent_name,
                    "tpm_public_key": raw_public_key,  # Store raw public key content
                    "geolocation": {
                        "country": self.country,
                        "state": self.state,
                        "city": self.city
                    },
                    "status": "active",
                    "created_at": "2025-08-15T18:00:00Z"
                }
                
                # Write back to allowlist
                with open(allowlist_path, 'w') as f:
                    json.dump(allowed_agents, f, indent=2)
                
                logger.info("Agent updated in collector allowlist", agent_name=self.agent_name)
                
                # Also update gateway allowlist
                self.add_to_gateway_allowlist(raw_public_key, public_key_hash)
                return
        
        # Add new agent entry
        new_agent = {
            "agent_name": self.agent_name,
            "tpm_public_key": raw_public_key,  # Store raw public key content
            "geolocation": {
                "country": self.country,
                "state": self.state,
                "city": self.city
            },
            "status": "active",
            "created_at": "2025-08-15T18:00:00Z"
        }
        
        allowed_agents.append(new_agent)
        
        # Write back to allowlist
        with open(allowlist_path, 'w') as f:
            json.dump(allowed_agents, f, indent=2)
        
        logger.info("Agent added to collector allowlist", agent_name=self.agent_name)
        
        # Also add to gateway allowlist
        self.add_to_gateway_allowlist(raw_public_key, public_key_hash)
    
    def add_to_gateway_allowlist(self, raw_public_key: str, public_key_hash: str):
        """Add agent to gateway allowlist."""
        logger.info("Adding agent to gateway allowlist", agent_name=self.agent_name)
        
        allowlist_path = "gateway/allowed_agents.json"
        
        # Load existing allowlist
        if os.path.exists(allowlist_path):
            with open(allowlist_path, 'r') as f:
                allowed_agents = json.load(f)
        else:
            allowed_agents = []
        
        # Check if agent already exists and update it
        for i, agent in enumerate(allowed_agents):
            if agent.get('agent_name') == self.agent_name:
                logger.info("Agent already exists in gateway allowlist, updating", agent_name=self.agent_name)
                # Update the existing agent entry
                allowed_agents[i] = {
                    "agent_name": self.agent_name,
                    "tpm_public_key": raw_public_key,  # Store raw public key content
                    "tpm_public_key_hash": public_key_hash,  # Store hash for quick lookup
                    "geolocation": {
                        "country": self.country,
                        "state": self.state,
                        "city": self.city
                    },
                    "status": "active",
                    "created_at": "2025-08-15T18:00:00Z"
                }
                
                # Write back to allowlist
                with open(allowlist_path, 'w') as f:
                    json.dump(allowed_agents, f, indent=2)
                
                logger.info("Agent updated in gateway allowlist", agent_name=self.agent_name)
                return
        
        # Add new agent entry
        new_agent = {
            "agent_name": self.agent_name,
            "tpm_public_key": raw_public_key,  # Store raw public key content
            "tpm_public_key_hash": public_key_hash,  # Store hash for quick lookup
            "geolocation": {
                "country": self.country,
                "state": self.state,
                "city": self.city
            },
            "status": "active",
            "created_at": "2025-08-15T18:00:00Z"
        }
        
        allowed_agents.append(new_agent)
        
        # Write back to allowlist
        with open(allowlist_path, 'w') as f:
            json.dump(allowed_agents, f, indent=2)
        
        logger.info("Agent added to gateway allowlist", agent_name=self.agent_name)
        
    def _read_public_key_content(self):
        """Read and extract raw public key content from the TPM public key file."""
        public_key_file = f"tpm/{self.agent_name}_pubkey.pem"
        
        if not os.path.exists(public_key_file):
            logger.warning("Agent-specific public key file not found, agent may not have been fully initialized", 
                         public_key_file=public_key_file)
            # Return a placeholder - this will be updated after TPM persistence setup
            return f"PLACEHOLDER_FOR_{self.agent_name}"
        
        try:
            # Read the PEM formatted public key content
            with open(public_key_file, 'r') as f:
                pem_content = f.read().strip()
            
            # Extract raw public key content (remove PEM headers)
            raw_content = self._extract_raw_public_key_content(pem_content)
            
            logger.info("Raw public key content extracted successfully", 
                       public_key_file=public_key_file,
                       pem_length=len(pem_content),
                       raw_length=len(raw_content))
            
            return raw_content
            
        except Exception as e:
            logger.error("Failed to read public key content", 
                        public_key_file=public_key_file,
                        error=str(e))
            raise
    
    def _extract_raw_public_key_content(self, pem_content: str) -> str:
        """
        Extract raw public key content from PEM format.
        
        Args:
            pem_content: PEM formatted public key
            
        Returns:
            Raw base64-encoded public key content (without headers)
        """
        try:
            # Remove PEM headers and footers
            lines = pem_content.strip().split('\n')
            content_lines = []
            in_content = False
            
            for line in lines:
                if line.startswith('-----BEGIN PUBLIC KEY-----'):
                    in_content = True
                    continue
                elif line.startswith('-----END PUBLIC KEY-----'):
                    break
                elif in_content:
                    content_lines.append(line)
            
            # Join all content lines and remove any remaining whitespace
            raw_content = ''.join(content_lines).strip()
            
            logger.info("🔧 [AGENT_CREATOR] Extracted raw public key content", 
                       original_length=len(pem_content),
                       raw_length=len(raw_content))
            
            return raw_content
            
        except Exception as e:
            logger.error("Error extracting raw public key content", error=str(e))
            raise
        
    def create_agent(self):
        """Create complete agent setup."""
        logger.info("Starting agent creation", agent_name=self.agent_name)
        
        try:
            # Step 1: Create directory structure
            self.create_agent_directory()
            
            # Step 2: Create TPM files (before config so we can read the agent-specific key)
            self.create_tpm_files()
            
            # Step 3: Setup TPM persistence (this generates the agent-specific public key)
            self.setup_tpm_persistence()
            
            # Step 4: Create agent configuration (now we can read the agent-specific key)
            self.create_agent_config()
            
            # Step 5: Add to collector allowlist
            self.add_to_collector_allowlist()
            
            logger.info("Agent creation completed successfully", agent_name=self.agent_name)
            return True
            
        except Exception as e:
            logger.error("Agent creation failed", agent_name=self.agent_name, error=str(e))
            return False


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description='Create a new agent with complete setup')
    parser.add_argument('agent_name', help='Name of the agent (e.g., agent-003)')
    parser.add_argument('--location', default='US/California/Santa Clara',
                       help='Location in format "country/state/city" (default: US/California/Santa Clara)')
    
    args = parser.parse_args()
    
    print(f"🔧 Creating agent: {args.agent_name}")
    print(f"📍 Location: {args.location}")
    print(f"📁 Agent directory: agents/{args.agent_name}")
    
    try:
        creator = AgentCreator(args.agent_name, args.location)
        success = creator.create_agent()
        
        if success:
            # Calculate agent port and APP_HANDLE for display
            # Handle different agent naming patterns
            if args.agent_name.startswith('agent-') and args.agent_name.split('-')[-1].isdigit():
                # Standard pattern: agent-XXX where XXX is a number
                agent_number = int(args.agent_name.split('-')[-1])
                agent_port = 8401 + agent_number - 1
                base_handle = int("0x8101000B", 16)
                agent_handle = base_handle + agent_number - 1
            else:
                # Non-standard pattern: use a hash of the agent name for consistent port and handle
                import hashlib
                agent_hash = hashlib.md5(args.agent_name.encode()).hexdigest()
                agent_number = int(agent_hash[:8], 16) % 1000  # Use first 8 chars of hash, modulo 1000
                agent_port = 8401 + agent_number
                base_handle = int("0x8101000B", 16)
                agent_handle = base_handle + agent_number
                
            agent_app_handle = f"0x{agent_handle:08X}"
            
            print(f"\n✅ Agent '{args.agent_name}' created successfully!")
            print(f"📋 Next steps:")
            print(f"   1. Start the agent: python start_agent.py {args.agent_name}")
            print(f"   2. Agent will run on port: {agent_port}")
            print(f"   3. Agent will use APP_HANDLE: {agent_app_handle}")
            print(f"   4. Check agent status: curl https://localhost:{agent_port}/metrics/status")
        else:
            print(f"\n❌ Failed to create agent '{args.agent_name}'")
            sys.exit(1)
            
    except Exception as e:
        print(f"\n❌ Error creating agent: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
